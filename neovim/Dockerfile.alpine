FROM alpine:latest as builder

WORKDIR /mnt/build/ctags

RUN apk --no-cache add \
	git \
	xfce4-dev-tools \
	build-base

RUN \
	git clone https://github.com/universal-ctags/ctags \
	&& cd ctags \
	&& ./autogen.sh \
	&& ./configure --prefix=/usr/local \
	&& make \
	&& make install


FROM alpine:latest

LABEL \
        maintainer="n.debonnaire@gmail.com" \
        url.github="https://github.com/nicodebo/neovim-docker" \
        url.dockerhub="https://hub.docker.com/r/nicodebo/neovim-docker/"

ENV \
        UID="1000" \
        GID="1000" \
        UNAME="phage" \
        GNAME="phage" \
        SHELL="/bin/bash" \
        WORKSPACE="/mnt/workspace" \
	NVIM_CONFIG="/home/phage/.config/nvim" \
	NVIM_SHARE="/home/phage/.local/share" \
	NVIM_PCK="/home/phage/.local/share/nvim/site/pack" \
	ENV_DIR="/home/phage/.local/share/vendorvenv" \
	NVIM_PROVIDER_PYLIB="python3_neovim_provider" \
	PATH="/home/phage/.local/bin:${PATH}"

COPY --from=builder /usr/local/bin/ctags /usr/local/bin

RUN apk --no-cache add build-base cmake automake autoconf libtool pkgconf coreutils curl unzip gettext-tiny-dev
RUN \
	# install packages
	apk --no-cache add \
		# needed by neovim :CheckHealth to fetch info
		# needed to change uid and gid on running container
	shadow \
		# needed to install apk packages as neovim user on the container
	sudo \
		# needed to switch user
        su-exec \
		# needed for neovim python3 support
	python3 \
		# needed for pipsi
	py3-virtualenv \
		# text editor
	fzf \
	bash 
		# needed by fzf because the default shell does not support fzf

# install build packages
RUN \ 
	apk --no-cache add --virtual build-dependencies \
        gcc \
	g++ \
	python3-dev \
        musl-dev \
	git \
	# create user
	&& addgroup "${GNAME}" \
	&& adduser -D -G "${GNAME}" -g "" -s "${SHELL}" "${UNAME}" \
        && echo "${UNAME} ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers \
	# install neovim python3 provider
	&& sudo -u phage python3 -m venv "${ENV_DIR}/${NVIM_PROVIDER_PYLIB}" \
	&& "${ENV_DIR}/${NVIM_PROVIDER_PYLIB}/bin/pip" install pynvim \
	# install pipsi and python language server
	&& curl https://raw.githubusercontent.com/mitsuhiko/pipsi/master/get-pipsi.py | sudo -u phage python3 \
	&& sudo -u phage pipsi install python-language-server 

RUN     sudo -u phage mkdir -p ${NVIM_CONFIG} \
	&& sudo -u phage mkdir -p ${NVIM_SHARE} \
	&& sudo -u phage mkdir -p ${NVIM_CONFIG}/autoload/

USER phage
RUN sudo mkdir /home/phage/tmp \
    && sudo git clone https://github.com/neovim/neovim.git /home/phage/tmp
WORKDIR /home/phage/tmp
RUN sudo make CMAKE_BUILD_TYPE=RelWithDebInfo 
RUN sudo make install

### Install tools

WORKDIR /home/phage
RUN sudo apk add zsh tmux
RUN sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
RUN sed -i "s|robbyrussell|jtriley|g" ~/.zshrc
RUN git clone https://github.com/gpakosz/.tmux.git && \
    ln -s -f .tmux/.tmux.conf && \
    cp .tmux/.tmux.conf.local .
RUN git clone --depth 1 https://github.com/junegunn/fzf.git ~/.fzf && \
    ~/.fzf/install

# COPY --chown=phage:phage ./.zsh_history /home/phage/
RUN echo 'alias xclip="xclip -selection c"' >> ~/.zshrc
RUN echo 'set -g default-command $SHELL' >> ~/.tmux.conf.local


RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH="/home/phage/.cargo/bin:${PATH}"

RUN rustup component add rust-src
# RUN  git clone https://github.com/rust-analyzer/rust-analyzer.git && \
#      cd rust-analyzer && \
#      cargo xtask install --server # will install rust-analyzer into $HOME/.cargo/bin

# RUN 	chown -R phage:phage /home/phage/.local 
	# remove build packages
# RUN	&& sudo apk del build-dependencies

RUN mkdir ~/.config/nvim/lua/ && \
    mkdir ~/.config/nvim/plugin
COPY --chown=phage:phage ./plugins.lua /home/phage/.config/nvim/lua/
COPY --chown=phage:phage ./init.lua /home/phage/.config/nvim/
RUN nvim +PlugInstall +qall 


