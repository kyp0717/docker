
Super Duper Config
-----------------
* Todo
** DONE increase/decrease fontsize
** TODO save to github always
** TODO expand to full screen
   
* Packages
   #+BEGIN_SRC emacs-lisp

       (require 'package)
       (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
       ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
       ;; and `package-pinned-packages`. Most users will not need or want to do this.
       ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
       (package-initialize)
       ;;(package-refresh-contents)

    ;; Download Evil
    (unless (package-installed-p 'evil)
    (package-install 'evil ))
    (package-install 'use-package)
    (package-install 'mood-line)
    (package-install 'counsel)
    (package-install 'command-log-mode)
    (package-install 'spaceline)
    (package-install 'beacon)
    (package-install 'doom-modeline)
    (package-install 'spaceline-all-the-icons)
    (package-install 'ivy)
    (package-install 'swiper)
    (package-install 'smart-mode-line)
    (package-install 'powerline)
    (package-install 'org)
    (package-install 'ido)
    (package-install 'tuareg)
    (package-install 'projectile)
    (package-install 'company)
    (package-install 'org-bullets)
    (package-install 'org-superstar)
    (package-install 'evil)
    (package-install 'evil-org)
    (package-install 'smartparens)
    (package-install 'evil-commentary)
    (package-install 'evil-collection)
    (package-install 'fzf)
    (package-install 'merlin)
    (package-install 'auto-complete)
    (package-install 'windresize)
    (package-install 'eval-in-repl)
    (package-install 'ivy-posframe)
    (package-install 'ivy-rich)
    (package-install 'ivy-prescient)

   #+END_SRC

   #+RESULTS:
   : ‘all-the-icons’ is already installed

* General Settings
** Line Number
   #+begin_src emacs-lisp
     (require 'display-line-numbers)
     (defcustom display-line-numbers-exempt-modes '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
       "Major modes on which to disable the linum mode, exempts them from global requirement"
       :group 'display-line-numbers
       :type 'list
       :version "green")

     (defun display-line-numbers--turn-on ()
       "turn on line numbers but excempting certain majore modes defined in `display-line-numbers-exempt-modes'"
       (if (and
	    (not (member major-mode display-line-numbers-exempt-modes))
	    (not (minibufferp)))
	   (display-line-numbers-mode)))

     (global-display-line-numbers-mode)
   #+end_src

   #+RESULTS:
   : t

** Expand Region
   #+begin_src emacs-lisp
     (require 'expand-region)
     (global-set-key (kbd "s-=") 'er/expand-region)
   
   #+end_src
** Coding System
   #+begin_src emacs-lisp
	;; (prefer-coding-system 'utf-8)
	;; (set-default-coding-systems 'utf-8)
	;; (set-language-environment 'utf-8)
	;; (set-language-environment "UTF-8")
	;; (coding-system-for-write 'raw-text)
	;; (set-selection-coding-system 'utf-8)
     (setq utf-translate-cjk-mode nil) ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
     (set-language-environment 'utf-8)
     (set-keyboard-coding-system 'utf-8-mac) ; For old Carbon emacs on OS X only
     (setq locale-coding-system 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-selection-coding-system
       (if (eq system-type 'windows-nt)
	   'utf-16-le  ;; https://rufflewind.com/2014-07-20/pasting-unicode-in-emacs-on-windows
	 'utf-8))
     (prefer-coding-system 'utf-8)
   #+end_src

** Command Log Set up
   #+begin_src emacs-lisp

     (use-package command-log-mode
     :ensure t
     :config
     (global-command-log-mode)
     )
   #+end_src

   #+RESULTS:
   : t

** Font Size
   #+begin_src emacs-lisp
   (global-set-key (kbd "C-=") 'text-scale-increase)
   (global-set-key (kbd "C--") 'text-scale-decrease)
   
   #+end_src

   #+RESULTS:
   : text-scale-decrease

** Don't show startup msg
   #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (toggle-scroll-bar -1)
    (setq inhibit-startup-screen t)  
    
    (global-hl-line-mode t) ;; This highlights the current line in the buffer

    (use-package beacon ;; This applies a beacon effect to the highlighted line
    :ensure t
    :config
    (beacon-mode 1))
   ; (global-hl-mode +1)
   #+END_SRC

   #+RESULTS:
   : t

** Expand to full screen on startup
   #+BEGIN_SRC emacs-lisp
     ;; start the initial frame maximized
     ;; (add-to-list 'initial-frame-alist '(fullscreen . maximized))
   #+END_SRC

   #+RESULTS:
   : ((fullscreen . maximized))

** Exec Paths
   #+begin_src emacs-lisp
     ;; (add-to-list 'exec-path "/usr/local/bin")
     ;; (add-to-list 'exec-path "/home/k8s/.fzf/bin")
     ;; (add-to-list 'exec-path "/usr/bin")
      (setq exec-path (append exec-path '("/home/k8s/.fzf/bin")))
      (setenv "PATH" (concat (getenv "PATH") ":/home/k8s/.fzf/bin"))

   #+end_src

   #+RESULTS:
   : /home/k8s/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/k8s/.fzf/bin

 Smart Paren
  #+begin_src emacs-lisp
    ;;(require 'smartparens-config)
    ;; Always start smartparens mode in js-mode.
    ;;(add-hook 'emacs-lisp-mode-hook #'smartparens-mode)
    ;;(sp-local-pair 'org-mode "\\[" "\\]")
    ;;(sp-local-pair 'org-mode "$" "$")
    ;;(sp-local-pair 'org-mode "'" "'" :actions '(rem))
    ;;(sp-local-pair 'org-mode "=" "=" :actions '(rem))
    ;;(sp-local-pair 'org-mode "\\left(" "\\right)" :trigger "\\l(" :post-handlers '(sp-latex-insert-spaces-inside-pair))
    ;;(sp-local-pair 'org-mode "\\left[" "\\right]" :trigger "\\l[" :post-handlers '(sp-latex-insert-spaces-inside-pair))
    ;;(sp-local-pair 'org-mode "\\left\\{" "\\right\\}" :trigger "\\l{" :post-handlers '(sp-latex-insert-spaces-inside-pair))
    ;(sp-local-pair 'org-mode "\\left|" "\\right|" :trigger "\\l|" :post-handlers '(sp-latex-insert-spaces-inside-pair))
  #+end_src


* Auto-Completion Setu
** Company
   #+begin_src emacs-lisp
    ;; enable globally    
    (add-hook 'after-init-hook 'global-company-mode)

    (setq company-idle-delay 0)
    (setq company-dabbrev-downcase 0)
    (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
	(minibuffer-complete)
	(if (or (not yas-minor-mode)
		(null (do-yas-expand)))
	    (if (check-expansion)
		(company-complete-common)
	    (indent-for-tab-command)))))
	   
    (global-set-key [backtab] 'tab-indent-or-complete)
   #+end_src

   #+RESULTS:
   : tab-indent-or-complete

* Evil Mode
** Config
   #+BEGIN_SRC emacs-lisp
     ;; Enable Evil
     ;; Evil
     (use-package evil 
     :init
     (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
     (setq evil-want-keybinding nil)
     :config
	 (evil-mode 1)
	 (setq evil-emacs-state-cursor '("red" box)
		 evil-normal-state-cursor '("green" box)
		 evil-visual-state-cursor '("orange" box)
		 evil-insert-state-cursor '("yellow" bar)
		 evil-replace-state-cursor '("red" bar)
		 evil-operator-state-cursor '("red" hollow)
		 evil-cross-lines t)
     )

     (use-package evil-collection
     :after evil
     ;; :ensure t
     :config
     (evil-collection-init)
     )
   #+END_SRC
   
** Comments
   #+BEGIN_SRC emacs-lisp
     (require 'evil-commentary)
     (evil-commentary-mode)
     (evil-collection-init)
   #+END_SRC
   
* Org Mode Config

** add languages
   #+begin_src emacs-lisp
    (org-babel-do-load-languages
    'org-babel-load-languages
	'((python . t)
	(ocaml . t)))
   #+end_src

   #+RESULTS:

** settings
  #+BEGIN_SRC emacs-lisp
   (setq org-hide-emphasis-markers t)
   (setq org-src-tab-acts-natively t)
   (setq org-confirm-babel-evaluate nil)
   (require 'org-tempo) 
  #+END_SRC

  #+RESULTS:
  : org-tempo

** bullets
  #+BEGIN_SRC emacs-lisp
    ;; (use-package org-bullets
    ;;     :config
    ;;     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))) 
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package org-superstar
	:config
	(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))) 
  #+END_SRC

** evil integration
  #+BEGIN_SRC emacs-lisp
    ;; (add-to-list 'load-path "~/.emacs.d/plugins/evil-org-mode")
    (use-package evil-org
	:ensure t
	:after (evil org)
	:config
	(add-hook 'org-mode-hook 'evil-org-mode)
	(add-hook 'evil-org-mode-hook
		    (lambda ()
		    (evil-org-set-key-theme 
		      '(todo navigation insert textobjects additional calendar))))
	(require 'evil-org-agenda)
	(evil-org-agenda-set-keys))
  #+END_SRC

  #+RESULTS:
  : t

* Send to repl shortcut

** ielm config
   #+begin_src emacs-lisp
     (use-package eval-in-repl-ielm
     :init
     ;; Evaluate expression in the current buffer.
     (setq eir-ielm-eval-in-current-buffer t)
     :config
    ;; for .el files
    (define-key emacs-lisp-mode-map (kbd "<C-return>") 'eir-eval-in-ielm)
    ;; for *scratch*
    (define-key lisp-interaction-mode-map (kbd "<C-return>") 'eir-eval-in-ielm)
    ;; for M-x info
    (define-key Info-mode-map (kbd "<C-return>") 'eir-eval-in-ielm))

   #+end_src

   #+RESULTS:

* Ocaml
  #+begin_src emacs-lisp

    ;; (let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
    ;; (when (and opam-share (file-directory-p opam-share))
    ;; ;; Register Merlin
    ;; (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
    ;; (autoload 'merlin-mode "merlin" nil t nil)
    ;; ;; Automatically start it in OCaml buffers
    ;; (add-hook 'tuareg-mode-hook 'merlin-mode t)
    ;; (add-hook 'caml-mode-hook 'merlin-mode t)
    ;; ;; Use opam switch to lookup ocamlmerlin binary
    ;; (setq merlin-command 'opam)))
    
  #+end_src
* Ivy
** ivy generic
   #+begin_src emacs-lisp

     ;; (ivy-mode 1)
     ;; (setq ivy-use-virtual-buffers t)
     ;; (setq enable-recursive-minibuffers t)
     ;; ;; enable this if you want `swiper' to use it
     ;; (setq search-default-mode #'char-fold-to-regexp)
     ;; (global-set-key "\C-s" 'swiper)
     ;; (global-set-key (kbd "C-c C-r") 'ivy-resume)
     ;; (global-set-key (kbd "<f6>") 'ivy-resume)
     ;; (global-set-key (kbd "M-x") 'counsel-M-x)
     ;; (global-set-key (kbd "C-x C-f") 'counsel-find-file)
     ;; (global-set-key (kbd "<f1> f") 'counsel-describe-function)
     ;; (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
     ;; (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
     ;; (global-set-key (kbd "<f1> l") 'counsel-find-library)
     ;; (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
     ;; (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
     ;; (global-set-key (kbd "C-c g") 'counsel-git)
     ;; (global-set-key (kbd "C-c j") 'counsel-git-grep)
     ;; (global-set-key (kbd "C-c k") 'counsel-ag)
     ;; (global-set-key (kbd "C-x l") 'counsel-locate)
     ;; (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
     ;; (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)

   #+end_src
** ivy main
   #+begin_src emacs-lisp

(use-package ivy
  :ensure t
  :delight
  :config
  (setq ivy-count-format "(%d/%d) ")
  (setq ivy-height-alist '((t lambda (_caller) (/ (window-height) 4))))
  (setq ivy-use-virtual-buffers t)
  (setq ivy-wrap nil)
  (setq ivy-re-builders-alist
        '((counsel-M-x . ivy--regex-fuzzy)
          (ivy-switch-buffer . ivy--regex-fuzzy)
          (ivy-switch-buffer-other-window . ivy--regex-fuzzy)
          (counsel-rg . ivy--regex-or-literal)
          (t . ivy--regex-plus)))
  (setq ivy-display-style 'fancy)
  (setq ivy-use-selectable-prompt t)
  (setq ivy-fixed-height-minibuffer nil)
  (setq ivy-initial-inputs-alist
        '((counsel-M-x . "^")
          (ivy-switch-buffer . "^")
          (ivy-switch-buffer-other-window . "^")
          (counsel-describe-function . "^")
          (counsel-describe-variable . "^")
          (t . "")))

  (ivy-set-occur 'counsel-fzf 'counsel-fzf-occur)
  (ivy-set-occur 'counsel-rg 'counsel-ag-occur)
  (ivy-set-occur 'ivy-switch-buffer 'ivy-switch-buffer-occur)
  (ivy-set-occur 'swiper 'swiper-occur)
  (ivy-set-occur 'swiper-isearch 'swiper-occur)
  (ivy-set-occur 'swiper-multi 'counsel-ag-occur)
  :hook ((after-init . ivy-mode)
         (ivy-occur-mode . hl-line-mode))
  :bind (("<s-up>" . ivy-push-view)
		 ("<s-down>" . ivy-switch-view)
         ("C-S-r" . ivy-resume)
         :map ivy-occur-mode-map
         ("f" . forward-char)
         ("b" . backward-char)
         ("n" . ivy-occur-next-line)
         ("p" . ivy-occur-previous-line)
         ("<C-return>" . ivy-occur-press)))


   #+end_src

   #+RESULTS:
   : counsel-find-file
** ivy counsel
   #+begin_src emacs-lisp

     (use-package counsel
     :ensure t
     :after ivy
     :config
     (setq counsel-yank-pop-preselect-last t)
     (setq counsel-yank-pop-separator "\n—————————\n")
     (setq counsel-rg-base-command
	     "rg -SHn --no-heading --color never --no-follow --hidden %s")
     (setq counsel-find-file-occur-cmd; TODO Simplify this
	     "ls -a | grep -i -E '%s' | tr '\\n' '\\0' | xargs -0 ls -d --group-directories-first")

     (defun prot/counsel-fzf-rg-files (&optional input dir)
	 "Run `fzf' in tandem with `ripgrep' to find files in the
     present directory.  If invoked from inside a version-controlled
     repository, then the corresponding root is used instead."
	 (interactive)
	 (let* ((process-environment
		 (cons (concat "FZF_DEFAULT_COMMAND=rg -Sn --color never --files --no-follow --hidden")
		     process-environment))
	     (vc (vc-root-dir)))
	 (if dir
	     (counsel-fzf input dir)
	     (if (eq vc nil)
		 (counsel-fzf input default-directory)
	     (counsel-fzf input vc)))))

     (defun prot/counsel-fzf-dir (arg)
	 "Specify root directory for `counsel-fzf'."
	 (prot/counsel-fzf-rg-files ivy-text
				 (read-directory-name
				     (concat (car (split-string counsel-fzf-cmd))
					     " in directory: "))))

     (defun prot/counsel-rg-dir (arg)
	 "Specify root directory for `counsel-rg'."
	 (let ((current-prefix-arg '(4)))
	 (counsel-rg ivy-text nil "")))

     ;; TODO generalise for all relevant file/buffer counsel-*?
     (defun prot/counsel-fzf-ace-window (arg)
	 "Use `ace-window' on `prot/counsel-fzf-rg-files' candidate."
	 (ace-window t)
	 (let ((default-directory (if (eq (vc-root-dir) nil)
				     counsel--fzf-dir
				 (vc-root-dir))))
	 (if (> (length (aw-window-list)) 1)
	     (find-file arg)
	     (find-file-other-window arg))
	 (balance-windows (current-buffer))))

     ;; Pass functions as appropriate Ivy actions (accessed via M-o)
     (ivy-add-actions
     'counsel-fzf
     '(("r" prot/counsel-fzf-dir "change root directory")
	 ("g" prot/counsel-rg-dir "use ripgrep in root directory")
	 ("a" prot/counsel-fzf-ace-window "ace-window switch")))

     (ivy-add-actions
     'counsel-rg
     '(("r" prot/counsel-rg-dir "change root directory")
	 ("z" prot/counsel-fzf-dir "find file with fzf in root directory")))

     (ivy-add-actions
     'counsel-find-file
     '(("g" prot/counsel-rg-dir "use ripgrep in root directory")
	 ("z" prot/counsel-fzf-dir "find file with fzf in root directory")))

     ;; Remove commands that only work with key bindings
     (put 'counsel-find-symbol 'no-counsel-M-x t)
     :bind (("M-x" . counsel-M-x)
	     ("C-x C-f" . counsel-find-file)
	     ("s-f" . counsel-find-file)
	     ("s-F" . find-file-other-window)
	     ("C-x b" . ivy-switch-buffer)
	     ("s-b" . ivy-switch-buffer)
	     ("C-x B" . counsel-switch-buffer-other-window)
	     ("s-B" . counsel-switch-buffer-other-window)
	     ("C-x d" . counsel-dired)
	     ("s-d" . counsel-dired)
	     ("s-D" . dired-other-window)
	     ("C-x C-r" . counsel-recentf)
	     ("s-m" . counsel-mark-ring)
	     ("s-r" . counsel-recentf)
	     ("s-y" . counsel-yank-pop)
	     ("C-h f" . counsel-describe-function)
	     ("C-h v" . counsel-describe-variable)
	     ("M-s r" . counsel-rg)
	     ("M-s g" . counsel-git-grep)
	     ("M-s l" . counsel-find-library)
	     ("M-s z" . prot/counsel-fzf-rg-files)
	     :map ivy-minibuffer-map
	     ("C-r" . counsel-minibuffer-history)
	     ("s-y" . ivy-next-line)        ; Avoid 2× `counsel-yank-pop'
	     ("C-SPC" . ivy-restrict-to-matches)))



   #+end_src
** ivy prescient 
   #+begin_src emacs-lisp

(use-package prescient
  :ensure t
  :config
  (setq prescient-history-length 200)
  (setq prescient-save-file "~/.emacs.d/prescient-items")
  (setq prescient-filter-method '(literal regexp))
  (prescient-persist-mode 1))

(use-package ivy-prescient
  :ensure t
  :after (prescient ivy)
  :config
  (setq ivy-prescient-sort-commands
        '(:not counsel-grep
               counsel-rg
               counsel-switch-buffer
               ivy-switch-buffer
               swiper
               swiper-multi))
  (setq ivy-prescient-retain-classic-highlighting t)
  (setq ivy-prescient-enable-filtering nil)
  (setq ivy-prescient-enable-sorting t)
  (ivy-prescient-mode 1))

   #+end_src

   #+RESULTS:
   | ivy-rich-mode | ivy-posframe-mode | global-company-mode | package--save-selected-packages | x-wm-set-size-hint | tramp-register-archive-file-name-handler |

** ivy postframe
   #+begin_src emacs-lisp
    (use-package ivy-posframe
    :ensure t
    :delight
    :config
    (setq ivy-posframe-parameters
	    '((left-fringe . 2)
	    (right-fringe . 2)
	    (internal-border-width . 2)
	    ;; (font . "Iosevka-10.75:hintstyle=hintfull")
    ))
    (setq ivy-posframe-height-alist
	    '((swiper . 15)
	    (swiper-isearch . 15)
	    (t . 10)))
    (setq ivy-posframe-display-functions-alist
	    '((complete-symbol . ivy-posframe-display-at-point)
	    (swiper . nil)
	    (swiper-isearch . nil)
	    (t . ivy-posframe-display-at-frame-center)))
    :hook (after-init . ivy-posframe-mode))

   
   #+end_src

** ivy rich
   #+begin_src emacs-lisp

    (use-package ivy-rich
    :ensure t
    :config
    (setq ivy-rich-path-style 'abbreviate)
    (setcdr (assq t ivy-format-functions-alist)
	    #'ivy-format-function-line)
    :hook (after-init . ivy-rich-mode))


   #+end_src

   #+RESULTS:
   | ivy-rich-mode | ivy-posframe-mode | global-company-mode | package--save-selected-packages | x-wm-set-size-hint | tramp-register-archive-file-name-handler |

** ivy swiper
   #+begin_src emacs-lisp

    (use-package swiper
    :ensure t
    :after ivy
    :config
    (setq swiper-action-recenter t)
    (setq swiper-goto-start-of-match t)
    (setq swiper-include-line-number-in-search t)
    :bind (("C-s" . swiper)
	    ("M-s s" . swiper-multi)
	    ("M-s w" . swiper-thing-at-point)
	    :map swiper-map
	    ("M-%" . swiper-query-replace)))

   #+end_src

   #+RESULTS:
   : swiper-query-replace

* UI

** Modus Themes
   #+begin_src emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/modus-themes")
    (require 'modus-themes)
    ;; Load the theme files before enabling a theme (else you get an error).
    (modus-themes-load-themes)
    (modus-themes-load-vivendi)             ; Dark theme
   #+end_src
** Modeline
   #+begin_src emacs-lisp
     ;; Theme settings
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

    (use-package spaceline :ensure t
    :config
    (setq-default mode-line-format '("%e" (:eval (spaceline-ml-main)))))

    (use-package spaceline-config :ensure spaceline
    :config
    (spaceline-helm-mode 1)
    (spaceline-emacs-theme))



     ;; (require 'powerline)
     ;; (powerline-vim-theme)
     ;; (require 'airline-themes)
     ;; (load-theme 'airline-onedark t)

   #+end_src

* Modes

* Outline Mode
  #+begin_src emacs-lisp
    ;;; Look into bicycle (tarsius)
    (use-package bicycle
      :after outline
      :bind (:map outline-minor-mode-map
		  ([C-tab] . bicycle-cycle)
		  ([S-tab] . bicycle-cycle-global)))

    (use-package prog-mode
      :config
      (add-hook 'prog-mode-hook 'outline-minor-mode)
      (add-hook 'prog-mode-hook 'hs-minor-mode))
  #+end_src

  #+RESULTS:
  : t

* Test Code / Learning

** demo ivy
   #+begin_src emacs-lisp

   ;; (ivy-read "My buffers: " (mapcar #'buffer-name (buffer-list)))
   #+end_src
