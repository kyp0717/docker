
Super Duper Config
-----------------
* Todo
** DONE increase/decrease fontsize
** TODO save to github always
** TODO expand to full screen
   
* General Settings

** Command Log Set up
   #+begin_src emacs-lisp
   
    (use-package command-log-mode
    :ensure t
    :config
    (global-command-log-mode)
    )
   #+end_src

   #+RESULTS:
   : t

** Global Key Binding
   #+begin_src emacs-lisp
   (global-set-key (kbd "C-=") 'text-scale-increase)
   (global-set-key (kbd "C--") 'text-scale-decrease)
   
   #+end_src

   #+RESULTS:
   : text-scale-decrease

** Don't show startup msg
   #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (toggle-scroll-bar -1)
    (setq inhibit-startup-screen t)  
    
    (global-hl-line-mode t) ;; This highlights the current line in the buffer

    (use-package beacon ;; This applies a beacon effect to the highlighted line
    :ensure t
    :config
    (beacon-mode 1))
   ; (global-hl-mode +1)
   #+END_SRC

   #+RESULTS:
   : t

** Expand to full screen on startup
   #+BEGIN_SRC emacs-lisp
     ;; start the initial frame maximized
     ;; (add-to-list 'initial-frame-alist '(fullscreen . maximized))
   #+END_SRC

   #+RESULTS:
   : ((fullscreen . maximized))

** Exec Paths
   #+begin_src emacs-lisp
     ;; (add-to-list 'exec-path "/usr/local/bin")
     ;; (add-to-list 'exec-path "/home/k8s/.fzf/bin")
     ;; (add-to-list 'exec-path "/usr/bin")
      (setq exec-path (append exec-path '("/home/k8s/.fzf/bin")))
      (setenv "PATH" (concat (getenv "PATH") ":/home/k8s/.fzf/bin"))

   #+end_src

   #+RESULTS:
   : /home/k8s/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/k8s/.fzf/bin

* Auto-Completion Setup
** Company
   #+begin_src emacs-lisp
    (setq company-idle-delay 0)
    (setq company-dabbrev-downcase 0)
    (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
	(minibuffer-complete)
	(if (or (not yas-minor-mode)
		(null (do-yas-expand)))
	    (if (check-expansion)
		(company-complete-common)
	    (indent-for-tab-command)))))
	   
    (global-set-key [backtab] 'tab-indent-or-complete)
   #+end_src

   #+RESULTS:
   : tab-indent-or-complete

* Packages
   #+BEGIN_SRC emacs-lisp

     (require 'package)
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
     ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
     ;; and `package-pinned-packages`. Most users will not need or want to do this.
     ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
     (package-initialize)
     ;;(package-refresh-contents)

     ;; Download Evil
     (unless (package-installed-p 'evil)
       (package-install 'evil ))

     (package-install 'counsel)
     (package-install 'ivy)
     (package-install 'swiper)
     (package-install 'smart-mode-line)
     (package-install 'powerline)
     (package-install 'gruvbox-theme)
     (package-install 'airline-themes)
     (package-install 'org)
     (package-install 'ido)
     (package-install 'tuareg)
     (package-install 'projectile)
     (package-install 'company)
     (package-install 'org-bullets)
     (package-install 'org-superstar)
     (package-install 'helm)
     (package-install 'evil)
     (package-install 'evil-org)
     ;;(package-install 'evil-org-agenda)
     (package-install 'evil-commentary)
     (package-install 'evil-collection)
     (package-install 'fzf)
     (package-install 'merlin)
     (package-install 'auto-complete)
   #+END_SRC
* Evil Mode
** Config
   #+BEGIN_SRC emacs-lisp
     ;; Enable Evil
     ;; Evil
     (use-package evil 
     :init
     (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
     (setq evil-want-keybinding nil)
     :config
	 (evil-mode 1)
	 (setq evil-emacs-state-cursor '("red" box)
		 evil-normal-state-cursor '("green" box)
		 evil-visual-state-cursor '("orange" box)
		 evil-insert-state-cursor '("blue" bar)
		 evil-replace-state-cursor '("red" bar)
		 evil-operator-state-cursor '("red" hollow)
		 evil-cross-lines t)
     )

     (use-package evil-collection
     :after evil
     ;; :ensure t
     :config
     (evil-collection-init)
     )
   #+END_SRC
   
** Comments
   #+BEGIN_SRC emacs-lisp
     (require 'evil-commentary)
     (evil-commentary-mode)
     (evil-collection-init)
   #+END_SRC
   
* Org Mode Config

** add languages
   #+begin_src emacs-lisp
    (org-babel-do-load-languages
    'org-babel-load-languages
	'((python . t)
	(ocaml . t)))
   #+end_src

   #+RESULTS:

** settings
  #+BEGIN_SRC emacs-lisp
   (setq org-hide-emphasis-markers t)
   (setq org-confirm-babel-evaluate nil)
   (require 'org-tempo) 
  #+END_SRC

  #+RESULTS:
  : org-tempo

** bullets
  #+BEGIN_SRC emacs-lisp
    ;; (use-package org-bullets
    ;;     :config
    ;;     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))) 
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package org-superstar
	:config
	(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))) 
  #+END_SRC

** evil integration
  #+BEGIN_SRC emacs-lisp
    ;; (add-to-list 'load-path "~/.emacs.d/plugins/evil-org-mode")
    (use-package evil-org
	:ensure t
	:after (evil org)
	:config
	(add-hook 'org-mode-hook 'evil-org-mode)
	(add-hook 'evil-org-mode-hook
		    (lambda ()
		    (evil-org-set-key-theme 
		      '(todo navigation insert textobjects additional calendar))))
	(require 'evil-org-agenda)
	(evil-org-agenda-set-keys))
  #+END_SRC

  #+RESULTS:
  : t

* Ocaml
  #+begin_src emacs-lisp

    ;; (let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
    ;; (when (and opam-share (file-directory-p opam-share))
    ;; ;; Register Merlin
    ;; (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
    ;; (autoload 'merlin-mode "merlin" nil t nil)
    ;; ;; Automatically start it in OCaml buffers
    ;; (add-hook 'tuareg-mode-hook 'merlin-mode t)
    ;; (add-hook 'caml-mode-hook 'merlin-mode t)
    ;; ;; Use opam switch to lookup ocamlmerlin binary
    ;; (setq merlin-command 'opam)))
    
  #+end_src
* Ivy
** ivy generic
   #+begin_src emacs-lisp

    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq enable-recursive-minibuffers t)
    ;; enable this if you want `swiper' to use it
    ;; (setq search-default-mode #'char-fold-to-regexp)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> o") 'counsel-describe-symbol)
    (global-set-key (kbd "<f1> l") 'counsel-find-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key minibuffer-local-map (kbd "C-r") 'counsel-minibuffer-history)
   #+end_src
* UI
** Modeline
   #+begin_src emacs-lisp
    ;; Theme settings
    (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

    (require 'powerline)
    (powerline-vim-theme)
    (require 'airline-themes)
    (load-theme 'airline-onedark t)
   #+end_src

* Modes

* Test Code / Learning

** demo ivy
   #+begin_src emacs-lisp

   ;; (ivy-read "My buffers: " (mapcar #'buffer-name (buffer-list)))
   #+end_src
