
Super Duper Config
-----------------
* Todo
** DONE increase/decrease fontsize
** TODO save to github always
** TODO expand to full screen
   
* Packages
   #+BEGIN_SRC emacs-lisp

       (require 'package)
       (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/") t)
       ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`
       ;; and `package-pinned-packages`. Most users will not need or want to do this.
       ;;(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/") t)
       (package-initialize)
       ;;(package-refresh-contents)

    ;; Download Evil
    (unless (package-installed-p 'evil)
    (package-install 'evil ))
    (package-install 'use-package)
    (package-install 'evil)
    (package-install 'evil-org)
    (package-install 'smartparens)
    (package-install 'evil-commentary)
    (package-install 'evil-collection)
    (package-install 'fzf)
    (package-install 'windresize)
    (package-install 'eval-in-repl)

   #+END_SRC

   #+RESULTS:
   : ‘all-the-icons’ is already installed

* General Settings
** Line Number
   #+begin_src emacs-lisp
     (require 'display-line-numbers)
     (defcustom display-line-numbers-exempt-modes '(vterm-mode eshell-mode shell-mode term-mode ansi-term-mode)
       "Major modes on which to disable the linum mode, exempts them from global requirement"
       :group 'display-line-numbers
       :type 'list
       :version "green")

     (defun display-line-numbers--turn-on ()
       "turn on line numbers but excempting certain majore modes defined in `display-line-numbers-exempt-modes'"
       (if (and
	    (not (member major-mode display-line-numbers-exempt-modes))
	    (not (minibufferp)))
	   (display-line-numbers-mode)))

     (global-display-line-numbers-mode)
   #+end_src

   #+RESULTS:
   : t

** Expand Region
   #+begin_src emacs-lisp
     (require 'expand-region)
     (global-set-key (kbd "s-=") 'er/expand-region)

   #+end_src
** Coding System
   #+begin_src emacs-lisp
	;; (prefer-coding-system 'utf-8)
	;; (set-default-coding-systems 'utf-8)
	;; (set-language-environment 'utf-8)
	;; (set-language-environment "UTF-8")
	;; (coding-system-for-write 'raw-text)
	;; (set-selection-coding-system 'utf-8)
     (setq utf-translate-cjk-mode nil) ; disable CJK coding/encoding (Chinese/Japanese/Korean characters)
     (set-language-environment 'utf-8)
     (set-keyboard-coding-system 'utf-8-mac) ; For old Carbon emacs on OS X only
     (setq locale-coding-system 'utf-8)
     (set-default-coding-systems 'utf-8)
     (set-terminal-coding-system 'utf-8)
     (set-selection-coding-system
       (if (eq system-type 'windows-nt)
	   'utf-16-le  ;; https://rufflewind.com/2014-07-20/pasting-unicode-in-emacs-on-windows
	 'utf-8))
     (prefer-coding-system 'utf-8)
   #+end_src

** Font Size
   #+begin_src emacs-lisp
   (global-set-key (kbd "C-=") 'text-scale-increase)
   (global-set-key (kbd "C--") 'text-scale-decrease)
   
   #+end_src

   #+RESULTS:
   : text-scale-decrease

** Don't show startup msg
   #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (toggle-scroll-bar -1)
    (setq inhibit-startup-screen t)  
    
    (global-hl-line-mode t) ;; This highlights the current line in the buffer

    (use-package beacon ;; This applies a beacon effect to the highlighted line
    :ensure t
    :config
    (beacon-mode 1))
   ; (global-hl-mode +1)
   #+END_SRC

   #+RESULTS:
   : t

** Expand to full screen on startup
   #+BEGIN_SRC emacs-lisp
     ;; start the initial frame maximized
     ;; (add-to-list 'initial-frame-alist '(fullscreen . maximized))
   #+END_SRC

   #+RESULTS:
   : ((fullscreen . maximized))

** Exec Paths
   #+begin_src emacs-lisp
     ;; (add-to-list 'exec-path "/usr/local/bin")
     ;; (add-to-list 'exec-path "/home/k8s/.fzf/bin")
     ;; (add-to-list 'exec-path "/usr/bin")
      ;; (setq exec-path (append exec-path '("/home/k8s/.fzf/bin")))
      ;; (setenv "PATH" (concat (getenv "PATH") ":/home/k8s/.fzf/bin"))

   #+end_src

   #+RESULTS:
   : /home/k8s/.local/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:/home/k8s/.fzf/bin

** Smart Paren
  #+begin_src emacs-lisp
    ;;(require 'smartparens-config)
    ;; Always start smartparens mode in js-mode.
    ;;(add-hook 'emacs-lisp-mode-hook #'smartparens-mode)
    ;;(sp-local-pair 'org-mode "\\[" "\\]")
    ;;(sp-local-pair 'org-mode "$" "$")
    ;;(sp-local-pair 'org-mode "'" "'" :actions '(rem))
    ;;(sp-local-pair 'org-mode "=" "=" :actions '(rem))
    ;;(sp-local-pair 'org-mode "\\left(" "\\right)" :trigger "\\l(" :post-handlers '(sp-latex-insert-spaces-inside-pair))
    ;;(sp-local-pair 'org-mode "\\left[" "\\right]" :trigger "\\l[" :post-handlers '(sp-latex-insert-spaces-inside-pair))
    ;;(sp-local-pair 'org-mode "\\left\\{" "\\right\\}" :trigger "\\l{" :post-handlers '(sp-latex-insert-spaces-inside-pair))
    ;(sp-local-pair 'org-mode "\\left|" "\\right|" :trigger "\\l|" :post-handlers '(sp-latex-insert-spaces-inside-pair))
  #+end_src

* Auto-Completion Setu
** Company
   #+begin_src emacs-lisp
    ;; enable globally    
    (add-hook 'after-init-hook 'global-company-mode)

    (setq company-idle-delay 0)
    (setq company-dabbrev-downcase 0)
    (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
	(minibuffer-complete)
	(if (or (not yas-minor-mode)
		(null (do-yas-expand)))
	    (if (check-expansion)
		(company-complete-common)
	    (indent-for-tab-command)))))
	   
    (global-set-key [backtab] 'tab-indent-or-complete)
   #+end_src

   #+RESULTS:
   : tab-indent-or-complete

* Evil Mode
** Config
   #+BEGIN_SRC emacs-lisp
     ;; Enable Evil
     ;; Evil
     (use-package evil 
     :init
     (setq evil-want-integration t) ;; This is optional since it's already set to t by default.
     (setq evil-want-keybinding nil)
     :config
	 (evil-mode 1)
	 (setq evil-emacs-state-cursor '("red" box)
		 evil-normal-state-cursor '("green" box)
		 evil-visual-state-cursor '("orange" box)
		 evil-insert-state-cursor '("yellow" bar)
		 evil-replace-state-cursor '("red" bar)
		 evil-operator-state-cursor '("red" hollow)
		 evil-cross-lines t)
     )

     (use-package evil-collection
     :after evil
     ;; :ensure t
     :config
     (evil-collection-init)
     )
   #+END_SRC
   
** Comments
   #+BEGIN_SRC emacs-lisp
     (require 'evil-commentary)
     (evil-commentary-mode)
     (evil-collection-init)
   #+END_SRC
   
* Org Mode Config

** add languages
   #+begin_src emacs-lisp
    (org-babel-do-load-languages
    'org-babel-load-languages
	'((python . t)
	(ocaml . t)))
   #+end_src

   #+RESULTS:

** settings
  #+BEGIN_SRC emacs-lisp
   (setq org-hide-emphasis-markers t)
   (setq org-src-tab-acts-natively t)
   (setq org-confirm-babel-evaluate nil)
   (require 'org-tempo) 
  #+END_SRC

  #+RESULTS:
  : org-tempo

** bullets
  #+BEGIN_SRC emacs-lisp
    ;; (use-package org-bullets
    ;;     :config
    ;;     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))) 
  #+END_SRC
  #+BEGIN_SRC emacs-lisp
    (use-package org-superstar
	:config
	(add-hook 'org-mode-hook (lambda () (org-superstar-mode 1)))) 
  #+END_SRC

** evil integration
  #+BEGIN_SRC emacs-lisp
    ;; (add-to-list 'load-path "~/.emacs.d/plugins/evil-org-mode")
    (use-package evil-org
	:ensure t
	:after (evil org)
	:config
	(add-hook 'org-mode-hook 'evil-org-mode)
	(add-hook 'evil-org-mode-hook
		    (lambda ()
		    (evil-org-set-key-theme 
		      '(todo navigation insert textobjects additional calendar))))
	(require 'evil-org-agenda)
	(evil-org-agenda-set-keys))
  #+END_SRC

  #+RESULTS:
  : t

* Send to repl shortcut

** ielm config
   #+begin_src emacs-lisp
     (use-package eval-in-repl-ielm
     :init
     ;; Evaluate expression in the current buffer.
     (setq eir-ielm-eval-in-current-buffer t)
     :config
    ;; for .el files
    (define-key emacs-lisp-mode-map (kbd "<C-return>") 'eir-eval-in-ielm)
    ;; for *scratch*
    (define-key lisp-interaction-mode-map (kbd "<C-return>") 'eir-eval-in-ielm)
    ;; for M-x info
    (define-key Info-mode-map (kbd "<C-return>") 'eir-eval-in-ielm))

   #+end_src

   #+RESULTS:

* Ocaml
  #+begin_src emacs-lisp

    ;; (let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var" "share")))))
    ;; (when (and opam-share (file-directory-p opam-share))
    ;; ;; Register Merlin
    ;; (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
    ;; (autoload 'merlin-mode "merlin" nil t nil)
    ;; ;; Automatically start it in OCaml buffers
    ;; (add-hook 'tuareg-mode-hook 'merlin-mode t)
    ;; (add-hook 'caml-mode-hook 'merlin-mode t)
    ;; ;; Use opam switch to lookup ocamlmerlin binary
    ;; (setq merlin-command 'opam)))
    
  #+end_src
* UI

** Modus Themes
   #+begin_src emacs-lisp
     (add-to-list 'load-path "~/.emacs.d/modus-themes")
    (require 'modus-themes)
    ;; Load the theme files before enabling a theme (else you get an error).
    (modus-themes-load-themes)
    (modus-themes-load-vivendi)             ; Dark theme
   #+end_src
** Modeline
   #+begin_src emacs-lisp
     ;; Theme settings
     (add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

    (use-package spaceline :ensure t
    :config
    (setq-default mode-line-format '("%e" (:eval (spaceline-ml-main)))))

    (use-package spaceline-config :ensure spaceline
    :config
    (spaceline-helm-mode 1)
    (spaceline-emacs-theme))



     ;; (require 'powerline)
     ;; (powerline-vim-theme)
     ;; (require 'airline-themes)
     ;; (load-theme 'airline-onedark t)

   #+end_src

* Outline Mode
  #+begin_src emacs-lisp
    ;;; Look into bicycle (tarsius)
    (use-package bicycle
      :after outline
      :bind (:map outline-minor-mode-map
		  ([C-tab] . bicycle-cycle)
		  ([S-tab] . bicycle-cycle-global)))

    (use-package prog-mode
      :config
      (add-hook 'prog-mode-hook 'outline-minor-mode)
      (add-hook 'prog-mode-hook 'hs-minor-mode))
  #+end_src

  #+RESULTS:
  : t
  
  
* Orderless
  #+begin_src emacs-lisp

    (use-package orderless
      :ensure t
      :custom (completion-styles '(orderless)))

    (selectrum-mode +1)
    ;; (selectrum-prescient-mode +1)

  #+end_src
  
* Consult
  #+begin_src emacs-lisp
    ;; Example configuration for Consult
    (use-package consult
      ;; Replace bindings. Lazily loaded due by `use-package'.
      :bind (;; C-c bindings (mode-specific-map)
	     ("C-c h" . consult-history)
	     ("C-c m" . consult-mode-command)
	     ("C-c b" . consult-bookmark)
	     ("C-c k" . consult-kmacro)
	     ;; C-x bindings (ctl-x-map)
	     ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complet-command
	     ("C-x b" . consult-buffer)                ;; orig. switch-to-buffer
	     ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
	     ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
	     ;; Custom M-# bindings for fast register access
	     ("M-#" . consult-register-load)
	     ("M-'" . consult-register-store)          ;; orig. abbrev-prefix-mark (unrelated)
	     ("C-M-#" . consult-register)
	     ;; Other custom bindings
	     ("M-y" . consult-yank-pop)                ;; orig. yank-pop
	     ("<help> a" . consult-apropos)            ;; orig. apropos-command
	     ;; M-g bindings (goto-map)
	     ("M-g e" . consult-compile-error)
	     ("M-g g" . consult-goto-line)             ;; orig. goto-line
	     ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
	     ("M-g o" . consult-outline)
	     ("M-g m" . consult-mark)
	     ("M-g k" . consult-global-mark)
	     ("M-g i" . consult-imenu)
	     ("M-g I" . consult-project-imenu)
	     ;; M-s bindings (search-map)
	     ("M-s f" . consult-find)
	     ("M-s L" . consult-locate)
	     ("M-s g" . consult-grep)
	     ("M-s G" . consult-git-grep)
	     ("M-s r" . consult-ripgrep)
	     ("M-s l" . consult-line)
	     ("M-s m" . consult-multi-occur)
	     ("M-s k" . consult-keep-lines)
	     ("M-s u" . consult-focus-lines)
	     ;; Isearch integration
	     ("M-s e" . consult-isearch)
	     :map isearch-mode-map
	     ("M-e" . consult-isearch)                 ;; orig. isearch-edit-string
	     ("M-s e" . consult-isearch)               ;; orig. isearch-edit-string
	     ("M-s l" . consult-line))                 ;; required by consult-line to detect isearch

      ;; The :init configuration is always executed (Not lazy)
      :init

      ;; Optionally configure the register formatting. This improves the register
      ;; preview for `consult-register', `consult-register-load',
      ;; `consult-register-store' and the Emacs built-ins.
      (setq register-preview-delay 0
	    register-preview-function #'consult-register-format)

      ;; Optionally tweak the register preview window.
      ;; This adds thin lines, sorting and hides the mode line of the window.
      (advice-add #'register-preview :override #'consult-register-window)

      ;; Use Consult to select xref locations with preview
      (setq xref-show-xrefs-function #'consult-xref
	    xref-show-definitions-function #'consult-xref)

      ;; Configure other variables and modes in the :config section,
      ;; after lazily loading the package.
      :config

      ;; Optionally configure preview. Note that the preview-key can also be
      ;; configured on a per-command basis via `consult-config'. The default value
      ;; is 'any, such that any key triggers the preview.
      ;; (setq consult-preview-key 'any)
      ;; (setq consult-preview-key (kbd "M-p"))
      ;; (setq consult-preview-key (list (kbd "<S-down>") (kbd "<S-up>")))

      ;; Optionally configure the narrowing key.
      ;; Both < and C-+ work reasonably well.
      (setq consult-narrow-key "<") ;; (kbd "C-+")

      ;; Optionally make narrowing help available in the minibuffer.
      ;; Probably not needed if you are using which-key.
      ;; (define-key consult-narrow-map (vconcat consult-narrow-key "?") #'consult-narrow-help)

      ;; Optionally configure a function which returns the project root directory.
      ;; There are multiple reasonable alternatives to chose from:
      ;; * projectile-project-root
      ;; * vc-root-dir
      ;; * project-roots
      ;; * locate-dominating-file
      (autoload 'projectile-project-root "projectile")
      (setq consult-project-root-function #'projectile-project-root)
      ;; (setq consult-project-root-function
      ;;       (lambda ()
      ;;         (when-let (project (project-current))
      ;;           (car (project-roots project)))))
      ;; (setq consult-project-root-function #'vc-root-dir)
      ;; (setq consult-project-root-function
      ;;       (lambda () (locate-dominating-file "." ".git")))
      )

    ;; Optionally add the `consult-flycheck' command.
    (use-package consult-flycheck
      :bind (:map flycheck-command-map
		  ("!" . consult-flycheck)))


  #+end_src
